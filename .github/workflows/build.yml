# .github/workflows/build.yml
# This GitHub Actions workflow verifies that the project can be successfully built by Vercel.
# It runs on every pull request that targets the 'master' branch to catch build errors early.

name: "Verify Vercel Build"

on:
  pull_request:
    branches:
      - master
  # Optional: also run on pushes to master to ensure the main branch is always healthy
  push:
    branches:
      - master

jobs:
  verify-build:
    name: "Verify Build with Vercel CLI"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4

      - name: "Set up Node.js environment"
        uses: actions/setup-node@v4
        with:
          node-version: "22" # Use a specific Node.js version compatible with Vercel

      - name: "Cache npm packages"
        uses: actions/cache@v4 # Use caching to speed up Vercel CLI installation
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: "Install Vercel CLI"
        run: npm install --global vercel

      - name: "Create dummy Vercel project configuration"
        # The 'vercel build' command requires a .vercel/project.json file to exist.
        # This step creates a dummy file to satisfy the CLI without needing to be
        # linked to a real Vercel project, which is ideal for pull request checks.
        run: |
          mkdir -p .vercel
          echo '{"projectId": "prj_placeholder", "orgId": "team_placeholder"}' > .vercel/project.json

      - name: "Run Vercel Build Command"
        # This command simulates a production build. It will install dependencies
        # for all serverless functions (Go, Python, etc.) and attempt to build them.
        # The job will fail if there are any build errors.
        # No VERCEL_TOKEN is needed for this step.
        run: vercel build
